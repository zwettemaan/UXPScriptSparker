(function() {

// Don't use 'var $$SHORTCODE$$' - some engines call this within a non-global scope
// if using var we end up defining this in the wrong scope

if ("undefined" == typeof $$SHORTCODE$$) {
    $$SHORTCODE$$ = {};
}

$$SHORTCODE$$.LOG_CRITICAL_ERRORS = false;

$$SHORTCODE$$.relativeFilePathsToLoad = [
    "./globals.idjs",
    "./tweakableSettings.idjs",
    "./pathUtils.idjs",
    "./utils.idjs",
    "./fileio.idjs",
    "./init.idjs"
];

$$SHORTCODE$$.errorBeforeLoggingAvailable = async function errorBeforeLoggingAvailable(error) {

    if ($$SHORTCODE$$.logError) {
        $$SHORTCODE$$.logError(error);
    }
    else if ($$SHORTCODE$$.LOG_CRITICAL_ERRORS) {

        try {
            const desktop = uxp.storage.localFileSystem.getFolder(uxp.storage.domains.userDesktop);
            const logFile = desktop + "/criticalErrors.log";
            await logFile.write(error);            
        }
        catch (err) {

            try {
                console.log(error);
            }
            catch (err) {   
            }

        }
    }
}

})();

exports.loadModule = function(nameSpace) {

    for (var pathIdx = 0; pathIdx < $$SHORTCODE$$.relativeFilePathsToLoad.length; pathIdx++) {
        var path = $$SHORTCODE$$.relativeFilePathsToLoad[pathIdx];
        var module = require(path).loadModule(nameSpace);
    }

    for (var member in $$SHORTCODE$$) {
        nameSpace[member] = $$SHORTCODE$$[member];        
    }

    return nameSpace;    
}
