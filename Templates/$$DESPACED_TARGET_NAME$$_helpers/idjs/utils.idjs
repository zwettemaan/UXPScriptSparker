//
// This code is exclusively UXPScript. It provides UXPScript-specific 
// implementations of the utils API.
//
// utils.js depends on these functions being implemented
// When adding new functionality here, make sure to also 
// add corresponding tests to the utils_verifyDependencies()
//

(function() {

var ES_SCRIPT_appendLineToTextFile = 
    "(function(filePath, line) {" +
        "try {" +
            "var textFile = File(filePath);" +
            "textFile.open('a');" +
            "textFile.encoding = 'UTF8';" +
            "textFile.writeln(line);" +
            "textFile.close();" +
        "}" +
        "catch (err) {" +
        "}" +
    "})";

$$SHORTCODE$$.appendLineToTextFile = function(filePath, line) {

    try {
        var extendScript = 
            ES_SCRIPT_appendLineToTextFile + "(" +
                $$SHORTCODE$$.dQ(filePath) + "," +
                $$SHORTCODE$$.dQ(line) +
            ")";
        app.doScript(extendScript, ScriptLanguage.JAVASCRIPT);
    }
    catch (err) {        
    }
}

$$SHORTCODE$$.alert = function alert(msg) {
    
    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"

    $$SHORTCODE$$.logEntry(arguments);
    $endif

    const theDialog = app.dialogs.add();
    const col = theDialog.dialogColumns.add();
    const colText = col.staticTexts.add();
    colText.staticLabel = "" + msg;
    theDialog.canCancel = false;
    theDialog.show();
    theDialog.destroy();

    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"
    $$SHORTCODE$$.logExit(arguments);

    $endif
}

$$SHORTCODE$$.checkMac = function checkMac() {    

    var retVal = undefined;
    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"

    $$SHORTCODE$$.logEntry(arguments);
    $endif

    retVal = window.navigator.platform == "darwin";

    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"
    $$SHORTCODE$$.logExit(arguments);

    $endif
    return retVal;
}

$$SHORTCODE$$.checkWindows = function checkWindows() {    

    var retVal = undefined;
    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"

    $$SHORTCODE$$.logEntry(arguments);
    $endif

    retVal = window.navigator.platform.toLowerCase().indexOf("win") != -1;

    $if "$$ENABLE_LOG_ENTRY_EXIT$$" == "ON"
    $$SHORTCODE$$.logExit(arguments);

    $endif
    return retVal;
}

$$SHORTCODE$$.logMessage = function(reportingFunctionArguments, s) {

    var savedInLogger = $$SHORTCODE$$.inLogger;

    do {
        try {

            if ($$SHORTCODE$$.inLogger) {
                break;
            }
            
            $$SHORTCODE$$.inLogger = true;
            
            var prefix = "";

            if (! message) {

                  message = reportingFunctionArguments;
                  reportingFunctionArguments = undefined;

            }
            else if (reportingFunctionArguments) {

                if ("string" == typeof reportingFunctionArguments) {

                    prefix += reportingFunctionArguments + ": ";
                    
                }
                else {

                    var reportingFunctionName;
                    try {
                        reportingFunctionName = reportingFunctionArguments.callee.toString().match(/function ([^\(]+)/)[1];
                    }
                    catch (err) {
                        reportingFunctionName = "[anonymous function]";
                    }
                    prefix += reportingFunctionName + ": ";

                }
            }
            
            var logLine = prefix + message;
                    
            if ($$SHORTCODE$$.S.LOG_TO_FILEPATH) {
                $$SHORTCODE$$.appendLineToTextFile($$SHORTCODE$$.S.LOG_TO_FILEPATH, logLine);
            }

            if ($$SHORTCODE$$.S.LOG_TO_UXPDEVTOOL_CONSOLE) {
                console.log(logLine); 
            }

            if ($$SHORTCODE$$.S.LOG_TO_FILEPATH) {
                try {
                    var logFile = File($$SHORTCODE$$.S.LOG_TO_FILEPATH);
                    logFile.open("a");
                    logFile.writeln(estkLogLine);
                    logFile.close();
                }
                catch (err) {                
                }
            }

        }
        catch (err) {
        }
    }
    while (false);

    $$SHORTCODE$$.inLogger = savedInLogger;
}

})();
