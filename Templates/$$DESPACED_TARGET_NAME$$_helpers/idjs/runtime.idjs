// Don't use `var $$SHORTCODE$$`
// By using `var` we will end up defining this in the wrong scope

if ("undefined" == typeof $$SHORTCODE$$) {
    $$SHORTCODE$$ = {};
}

(function(){

$$SHORTCODE$$.relativeFilePathsToLoad = [

    "../shared/appMapper.js",

    "../api/globals.js",
    "./api/globals.idjs",
    "../shared/globals.js",
    "./globals.idjs",

    "../api/tweakableSettings.js",
    "../shared/tweakableSettings.js",

    "../api/utils.js",
    "../shared/utils.js",
    "./utils.idjs",

    "../api/path.js",
    "../shared/path.js",
    "./path.idjs",

    "../api/fileio.js",
    "./fileio.idjs",
    
    "../api/idDOM.js",
    "./idDOM.idjs",

    "../api/compat.js",
    "./compat.idjs",

    "../shared/init.js",
    "../../$$DESPACED_TARGET_NAME$$.js"
];

var ES_SCRIPT_getHomeDir = 
    "(function() {" +
        "function dQ(s){\nreturn'\"'+s.replace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"')+'\"';\n}" +
        "return dQ(Folder('~').fsName)" +
    "})()";

$$SHORTCODE$$.initDirsScript = async function initDirsScript() {

    var retVal = false;

    do {
        try {

            if (! $$SHORTCODE$$.dirs) {
                $$SHORTCODE$$.dirs = {};
            }

            var appLocalTemp = await $$SHORTCODE$$.fs.getTemporaryFolder();
            $$SHORTCODE$$.dirs.TEMP = 
                $$SHORTCODE$$.path.addTrailingSeparator(appLocalTemp.nativePath);

            // At the moment, on Windows, the temp path seems to give us relevant data 
            // regarding the user's context. This can break at any new UXPScript
            // version!

            try {

                var splitTempPath = $$SHORTCODE$$.dirs.TEMP.split($$SHORTCODE$$.path.SEPARATOR);

                if ($$SHORTCODE$$.isWindows) {

                    if (splitTempPath.length > 0) {
                        $$SHORTCODE$$.dirs.DRIVE_PREFIX = splitTempPath[0] + $$SHORTCODE$$.path.SEPARATOR;
                    }

                    if (splitTempPath.length > 1) {
                        $$SHORTCODE$$.dirs.USERS = 
                            $$SHORTCODE$$.dirs.DRIVE_PREFIX + 
                            splitTempPath[1] + $$SHORTCODE$$.path.SEPARATOR;
                    }

                    if (splitTempPath.length > 2) {
                        $$SHORTCODE$$.dirs.HOME = 
                            $$SHORTCODE$$.dirs.USERS + 
                            splitTempPath[2] + $$SHORTCODE$$.path.SEPARATOR;
                    }

                }
                else {
                
                    // On Mac, the temp path is located in /var... - of no use to us 
                    $$SHORTCODE$$.dirs.DRIVE_PREFIX = "";

                }
            }
            catch (err) {            
            }

            // Fall back to using ExtendScript if we did not manage to get the data
            if (! $$SHORTCODE$$.dirs.HOME) {
                $$SHORTCODE$$.dirs.HOME = 
                    $$SHORTCODE$$.path.addTrailingSeparator(
                        eval(
                            $$SHORTCODE$$.G.app.doScript(
                                ES_SCRIPT_getHomeDir, 
                                ScriptLanguage.JAVASCRIPT)));
            }

        }
        catch (err) { 
            $$SHORTCODE$$.criticalError("initScript throws " + err);
        }
    }
    while (false);
}

$$SHORTCODE$$.criticalError = function criticalError(error) {

    if ($$SHORTCODE$$.logError) {
        $$SHORTCODE$$.logError(error);
    }
    
    if ($$SHORTCODE$$.S.LOG_CRITICAL_ERRORS) {

        try {
            const desktop = 
                $$SHORTCODE$$.fs.getFolder(
                    $$SHORTCODE$$.storage.domains.userDesktop);
            const logFile = desktop.nativePath + "/criticalErrors.log";
            logFile.write(error);            
        }
        catch (err) {

            try {
                console.log(error);
            }
            catch (err) {   
            }

        }
    }
}

exports.loadModules = async function loadModules(nameSpace, completionCallback) {

    if ("undefined" == typeof app) {
        var id = require("indesign");
        $$SHORTCODE$$.G = id;
    }
    else if ("undefined" == typeof $ || ! $.global) {
        $$SHORTCODE$$.G = window;
    }
    else {
        $$SHORTCODE$$.G = $.global;
    }

    var failedTests = 0;
    var missingImplementations = 0;

    function verifyImplementationsAvailable(apiCollection) {
        if (apiCollection) {
            for (var entryName in apiCollection) {
                var entry = apiCollection[entryName];
                if ("function" == typeof entry && entry == $$SHORTCODE$$.IMPLEMENTATION_MISSING && entryName != "IMPLEMENTATION_MISSING") {
                    missingImplementations++;
                    $$SHORTCODE$$.criticalError("Missing implementation " + entryName);
                }
            }
        }
    }

    function runTests(testCollection) {
        if (testCollection) {
            for (var testEntryName in testCollection) {
                var testEntry = testCollection[testEntryName];
                if ("function" == typeof testEntry) {
                    if (testEntry()) {
                        $$SHORTCODE$$.logNote("Passed test " + testEntryName);
                    }
                    else {
                        $$SHORTCODE$$.criticalError("Failed test " + testEntryName);
                        failedTests++;
                    }
                }
                else if ("object" == typeof testEntry) {
                    runTests(testEntry);
                }
            }
        }
    }

    for (var pathIdx = 0; pathIdx < $$SHORTCODE$$.relativeFilePathsToLoad.length; pathIdx++) {
        var path = $$SHORTCODE$$.relativeFilePathsToLoad[pathIdx];
        require(path);
    }

    $$SHORTCODE$$.C.APP_NAME = $$SHORTCODE$$.mapAppId($$SHORTCODE$$.C.APP_ID);

    await $$SHORTCODE$$.initDirsScript();

    $$SHORTCODE$$.sharedInitScript();

    for (var member in $$SHORTCODE$$) {
        nameSpace[member] = $$SHORTCODE$$[member];        
    }

    if ($$SHORTCODE$$.S.RUN_TESTS) {
        verifyImplementationsAvailable($$SHORTCODE$$);
        runTests($$SHORTCODE$$.tests);
    }

    await $$SHORTCODE$$.main();
}

})();