(function() {

// Don't use `var $$SHORTCODE$$`
// By using `var` we will end up defining this in the wrong scope

if ("undefined" == typeof $$SHORTCODE$$) {
    $$SHORTCODE$$ = {};
}

// require() and global.require() are different functions. I've come up with a mix-and-match
// using both. Below, I fetch $$SHORTCODE$$.fs and $$SHORTCODE$$.g_fs which are different 'fs-like'
// entities

if (! $$SHORTCODE$$.tests) {
    $$SHORTCODE$$.tests = {};
}

if (! $$SHORTCODE$$.uxp) {
    $$SHORTCODE$$.uxp = require("uxp");
}

if (! $$SHORTCODE$$.storage) {
    $$SHORTCODE$$.storage = $$SHORTCODE$$.uxp.storage;
}

if (! $$SHORTCODE$$.fs) {
    $$SHORTCODE$$.fs = $$SHORTCODE$$.storage.localFileSystem;
}

if (! $$SHORTCODE$$.g_fs) {
    $$SHORTCODE$$.g_fs = global.require("fs");
}

var ES_SCRIPT_getHomeDir = 
    "(function() {" +
        "function dQ(s){\nreturn'\"'+s.replace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"')+'\"';\n}" +
        "return dQ(Folder('~').fsName)" +
    "})()";

$$SHORTCODE$$.relativeFilePathsToLoad = [

    "../shared/appMapper.js",

    "../api/globals.js",
    "../shared/globals.js",
    "./globals.idjs",

    "../api/tweakableSettings.js",
    "../shared/tweakableSettings.js",

    "../api/utils.js",
    "../shared/utils.js",
    "./utils.idjs",

    "../api/pathUtils.js",
    "../shared/pathUtils.js",
    "./pathUtils.idjs",

    "../api/fileio.js",
    "../shared/fileio.js",
    "./fileio.idjs",
    
    "../shared/init.js"
];

$$SHORTCODE$$.initScript = async function initScript(completionCallback) {

    var retVal = false;

    do {
        try {

            if (! $$SHORTCODE$$.dirs) {
                $$SHORTCODE$$.dirs = {};
            }

            $$SHORTCODE$$.dirs.RAW_HOME = eval(app.doScript(ES_SCRIPT_getHomeDir, ScriptLanguage.JAVASCRIPT));

            var appLocalTemp = await $$SHORTCODE$$.fs.getTemporaryFolder();
            $$SHORTCODE$$.dirs.RAW_TEMP = appLocalTemp.nativePath;

            $$SHORTCODE$$.sharedInitScript();

            completionCallback();
        }
        catch (err) { 
            $$SHORTCODE$$.criticalError("initScript throws " + err);
        }
    }
    while (false);
}

$$SHORTCODE$$.criticalError = function criticalError(error) {

    if ($$SHORTCODE$$.logError) {
        $$SHORTCODE$$.logError(error);
    }
    
    if ($$SHORTCODE$$.S.LOG_CRITICAL_ERRORS) {

        try {
            const desktop = 
                $$SHORTCODE$$.fs.getFolder(
                    $$SHORTCODE$$.storage.domains.userDesktop);
            const logFile = desktop.nativePath + "/criticalErrors.log";
            logFile.write(error);            
        }
        catch (err) {

            try {
                console.log(error);
            }
            catch (err) {   
            }

        }
    }
}

})();

exports.loadModules = async function loadModules(nameSpace, completionCallback) {

    var failedTests = 0;
    var missingImplementations = 0;

    function verifyImplementationsAvailable(apiCollection) {
        if (apiCollection) {
            for (var entryName in apiCollection) {
                var entry = apiCollection[entryName];
                if ("function" == typeof entry && entry == $$SHORTCODE$$.IMPLEMENTATION_MISSING) {
                    missingImplementations++;
                    $$SHORTCODE$$.criticalError("Missing implementation " + entryName);
                }
            }
        }
    }

    function runTests(testCollection) {
        if (testCollection) {
            for (var testEntryName in testCollection) {
                var testEntry = testCollection[testEntryName];
                if ("function" == typeof testEntry) {
                    if (! testEntry()) {
                        $$SHORTCODE$$.criticalError("Failed test " + testEntryName);
                        failedTests++;
                    }
                }
                else if ("object" == typeof testEntry) {
                    runTests(testEntry);
                }
            }
        }
    }

    for (var pathIdx = 0; pathIdx < $$SHORTCODE$$.relativeFilePathsToLoad.length; pathIdx++) {
        var path = $$SHORTCODE$$.relativeFilePathsToLoad[pathIdx];
        require(path);
    }

    await $$SHORTCODE$$.initScript(function() {

        for (var member in $$SHORTCODE$$) {
            nameSpace[member] = $$SHORTCODE$$[member];        
        }

        if ($$SHORTCODE$$.S.RUN_TESTS) {
            verifyImplementationsAvailable($$SHORTCODE$$);
            runTests($$SHORTCODE$$.tests);
        }

        completionCallback();

    });

}
