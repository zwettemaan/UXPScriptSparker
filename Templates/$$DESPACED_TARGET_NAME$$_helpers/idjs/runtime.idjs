(function() {

// Don't use `var $$SHORTCODE$$`
// By using `var` we will end up defining this in the wrong scope

if ("undefined" == typeof $$SHORTCODE$$) {
    $$SHORTCODE$$ = {};
}

if (! $$SHORTCODE$$.tests) {
    $$SHORTCODE$$.tests = {};
}

if (! $$SHORTCODE$$.UXP) {
    $$SHORTCODE$$.UXP = require("uxp");
}

$$SHORTCODE$$.relativeFilePathsToLoad = [

    "../shared/appMapper.js",

    "../api/globals.js",
    "../shared/globals.js",
    "./globals.idjs",

    "../api/tweakableSettings.js",
    "../shared/tweakableSettings.js",

    "../api/utils.js",
    "../shared/utils.js",
    "./utils.idjs",

    "../api/pathUtils.js",
    "../shared/pathUtils.js",

    "./fileio.idjs",
    "../shared/init.js"
];

$$SHORTCODE$$.initScript = function initScript(completionCallback) {

    var retVal = false;

    do {
        try {

            if (! $$SHORTCODE$$.dirs) {
                $$SHORTCODE$$.dirs = {};
            }

            $$SHORTCODE$$.fs.getFolder($$SHORTCODE$$.storage.domains.userDesktop).then(
                function(desktopFolder) {

                    $$SHORTCODE$$.dirs.RAW_DESKTOP = desktopFolder.nativePath;

                    $$SHORTCODE$$.dirs.RAW_HOME = 
                        $$SHORTCODE$$.path.dirName($$SHORTCODE$$.dirs.RAW_DESKTOP);

                    $$SHORTCODE$$.fs.getTemporaryFolder().then(

                        function(appLocalTemp) {

                            $$SHORTCODE$$.dirs.RAW_TEMP = appLocalTemp.nativePath;

                            $$SHORTCODE$$.sharedInitScript();

                            completionCallback();
                        }
                    );
                }
            );

        }
        catch (err) { 
            $$SHORTCODE$$.criticalError("initScript throws " + err);
        }
    }
    while (false);
}

$$SHORTCODE$$.criticalError = async function criticalError(error) {

    if ($$SHORTCODE$$.logError) {
        $$SHORTCODE$$.logError(error);
    }
    
    if ($$SHORTCODE$$.S.LOG_CRITICAL_ERRORS) {

        try {
            const desktop = 
                await $$SHORTCODE$$.fs.getFolder(
                    $$SHORTCODE$$.storage.domains.userDesktop);
            const logFile = desktop.nativePath + "/criticalErrors.log";
            await logFile.write(error);            
        }
        catch (err) {

            try {
                console.log(error);
            }
            catch (err) {   
            }

        }
    }
}

})();

exports.loadModules = function loadModules(nameSpace, completionCallback) {

    var failedTests = 0;
    var missingImplementations = 0;

    function verifyImplementationsAvailable(apiCollection) {
        if (apiCollection) {
            for (var entryName in apiCollection) {
                var entry = apiCollection[entryName];
                if ("function" == typeof entry && entry == $$SHORTCODE$$.IMPLEMENTATION_MISSING) {
                    missingImplementations++;
                    $$SHORTCODE$$.criticalError("Missing implementation " + entryName);
                }
            }
        }
    }

    function runTests(testCollection) {
        if (testCollection) {
            for (var testEntryName in testCollection) {
                var testEntry = testCollection[testEntryName];
                if ("function" == typeof testEntry) {
                    if (! testEntry()) {
                        $$SHORTCODE$$.criticalError("Failed test " + testEntryName);
                        failedTests++;
                    }
                }
                else if ("object" == typeof testEntry) {
                    runTests(testEntry);
                }
            }
        }
    }

    for (var pathIdx = 0; pathIdx < $$SHORTCODE$$.relativeFilePathsToLoad.length; pathIdx++) {
        var path = $$SHORTCODE$$.relativeFilePathsToLoad[pathIdx];
        require(path);
    }

    $$SHORTCODE$$.initScript(function() {

        for (var member in $$SHORTCODE$$) {
            nameSpace[member] = $$SHORTCODE$$[member];        
        }

        if ($$SHORTCODE$$.S.RUN_TESTS) {
            verifyImplementationsAvailable($$SHORTCODE$$);
            runTests($$SHORTCODE$$.tests);
        }

        completionCallback();

    });

}
